openapi: "3.0.3"
info:
  title: Messagerie ARC MAIL API
  description: API pour Arc Mail.
  version: 1.0.0
servers:
  - url: http://localhost:3000/
    description: Serveur de d√©veloppement

security:
  - bearerAuth: []

tags:
  - name: "users"
  - name: "signatures"

paths:
  # Users
  /user/login:
    post:
      tags:
        - "users"
      security: []
      summary: Login a user
      requestBody:
        description: User data to login
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailAddress:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - emailAddress
                - password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: Invalid credentials

  /user/register:
    post:
      tags:
        - "users"
      security: []
      summary: Create a new user
      requestBody:
        description: User data to create a new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /user:
    get:
      summary: Get the logged-in user
      tags:
        - "users"
      responses:
        "200":
          description: The user details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

    put:
      tags:
        - "users"
      security:
        - bearerAuth: []
      summary: Update the logged-in user
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                name:
                  type: string
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    delete:
      tags:
        - "users"
      security:
        - bearerAuth: []
      summary: Delete the logged-in user
      responses:
        "204":
          description: User deleted successfully

  # Signatures
  /signatures:
    get:
      tags:
        - "signatures"
      summary: Retrieve all user signatures
      description: Fetches all signatures associated with the logged-in user.
      responses:
        200:
          description: Successfully retrieved the list of signatures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Signature"
    post:
      tags:
        - "signatures"
      summary: Create a new signature for the logged-in user
      description: Allows a user to create a new signature.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignatureInput"
      responses:
        201:
          description: Successfully created the signature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signature"

  /signatures/{id}:
    get:
      tags:
        - "signatures"
      summary: Retrieve a specific signature of the logged-in user by ID
      description: Fetches the details of a signature by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the signature
          schema:
            type: string
      responses:
        200:
          description: Successfully retrieved the signature details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signature"
        404:
          description: Signature not found
    put:
      tags:
        - "signatures"
      summary: Update an existing signature of the logged-in user by ID
      description: Updates the content of a signature by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the signature
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignatureInput"
      responses:
        200:
          description: Successfully updated the signature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signature"
        404:
          description: Signature not found
    delete:
      tags:
        - "signatures"
      summary: Delete a signature of the logged-in user by ID
      description: Deletes a signature by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the signature
          schema:
            type: string
      responses:
        204:
          description: Successfully deleted the signature
        404:
          description: Signature not found

  /signatures/active:
    get:
      tags:
        - "signatures"
      summary: Get the active signature of the user
      responses:
        200:
          description: The active signature of the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signature"

  # Messages
  /messages:
    get:
      tags:
        - "messages"
      summary: Get all messages
      responses:
        "200":
          description: A list of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
    post:
      tags:
        - "messages"
      summary: Create a new message
      requestBody:
        description: Message data to create a new message
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageInput"
      responses:
        "201":
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /messages/{id}:
    get:
      tags:
        - "messages"
      summary: Get a message by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The message details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: Message not found
    put:
      tags:
        - "messages"
      summary: Update a message status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Message status to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [UNREAD, READ, FOLLOWED]
      responses:
        "200":
          description: Message status updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: Message not found

  /messages/{id}/move:
    put:
      tags:
        - "messages"
      summary: Move a message to a folder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Folder name to move the message
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                folderId:
                  type: string
      responses:
        "200":
          description: Message moved to the folder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: Message not found
        # "404":
        #   description: Folder not found"

  # Folders

  # Folders
  /folders:
    get:
      tags:
        - "folders"
      summary: Retrieve all user folders
      description: Fetches all folders associated with the logged-in user.
      responses:
        200:
          description: Successfully retrieved the folders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Folder"
    post:
      tags:
        - "folders"
      summary: Create a new folder
      description: Allows a user to create a new folder.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderInput"
      responses:
        201:
          description: Successfully created the folder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Folder"
        409:
          description: Folder already exists

  /folders/{id}:
    get:
      tags:
        - "folders"
      summary: Retrieve a specific folder
      description: Fetches the details of a folder by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the folder
          schema:
            type: string
      responses:
        200:
          description: Successfully retrieved the folder details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderWithMessages"
        404:
          description: Folder not found
    put:
      tags:
        - "folders"
      summary: Update an existing folder
      description: Updates the details of a folder by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the folder
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderInput"
      responses:
        200:
          description: Successfully updated the folder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderWithMessages"
        404:
          description: Folder not found
    delete:
      tags:
        - "folders"
      summary: Delete a folder
      description: Deletes a folder by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the folder
          schema:
            type: string
      responses:
        204:
          description: Successfully deleted the folder
        404:
          description: Folder not found

  /folders/{id}/messages:
    get:
      tags:
        - "folders"
      summary: Retrieve all messages of a folder
      description: Fetches all messages associated with a folder.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique ID of the folder
          schema:
            type: string
      responses:
        200:
          description: Successfully retrieved the messages of the folder
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        404:
          description: Folder not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        emailAddress:
          type: string
          format: email
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserInput:
      type: object
      properties:
        emailAddress:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
      required:
        - emailAddress
        - password
        - name

    Message:
      type: object
      properties:
        id:
          type: string
        sender:
          type: string
        recipients:
          type: array
          items:
            type: string
        subject:
          type: string
        body:
          type: string
        folderId:
          type: string
        status:
          type: string
          enum: [UNREAD, READ, FOLLOWED]
        createdAt:
          type: string
          format: date-time

    MessageInput:
      type: object
      properties:
        sender:
          type: string
        recipients:
          type: array
          items:
            type: string
        subject:
          type: string
        body:
          type: string
      required:
        - sender
        - recipients
        - subject
        - body

    Signature:
      type: object
      properties:
        id:
          type: string
        body:
          type: string
        userId:
          type: string
        isActive:
          type: boolean

    SignatureInput:
      type: object
      properties:
        body:
          type: string
        isActive:
          type: boolean

    Folder:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        userId:
          type: string

    FolderWithMessages:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        userId:
          type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"

    FolderInput:
      type: object
      properties:
        name:
          type: string
