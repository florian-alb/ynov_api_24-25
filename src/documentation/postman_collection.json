{
	"info": {
		"_postman_id": "2bb9e1db-8409-4838-830f-bc49f6c6c714",
		"name": "Messagerie ARC MAIL API With Test",
		"description": "API pour Arc Mail.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27773864"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "Login a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is acceptable\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"pm.test(\"Response contains JWT token\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('token');",
											"    pm.expect(responseJson.token).to.be.a('string').and.to.not.be.empty;",
											"});",
											"",
											"// Save the token for other requests",
											"if (pm.response.code === 200) {",
											"    const responseJson = pm.response.json();",
											"    pm.collectionVariables.set(\"bearerToken\", responseJson.token);",
											"}",
											"",
											"",
											"pm.test(\"Response has correct user properties\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('success');",
											"    pm.expect(responseJson).to.have.property('message');",
											"    pm.expect(responseJson).to.have.property('token');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"emailAddress\": \"user@example.com\",\n    \"password\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "User logged in successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailAddress\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Invalid credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailAddress\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "register",
					"item": [
						{
							"name": "Create a new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has correct user properties\", function () {",
											"    const responseJson = pm.response.json().data;",
											"    pm.expect(responseJson).to.have.property('id');",
											"    pm.expect(responseJson).to.have.property('emailAddress');",
											"    pm.expect(responseJson).to.have.property('name');",
											"});",
											"",
											"pm.test(\"User already exists\", function () {",
											"    if (pm.response.code === 409){",
											"        pm.response.to.have.status(409);",
											"        const jsonData = pm.response.json();",
											"        pm.expect(jsonData).to.have.property(\"errors\");",
											"        pm.expect(jsonData.message).to.eql(\"User already exists\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailAddress\": \"user@example.com\",\n  \"password\": \"string\",\n  \"name\": \"string\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "User created successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailAddress\": \"<email>\",\n  \"password\": \"<string>\",\n  \"name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"emailAddress\": \"<email>\",\n  \"name\": \"<string>\",\n  \"createdAt\": \"<dateTime>\",\n  \"updatedAt\": \"<dateTime>\"\n}"
								},
								{
									"name": "Invalid email address",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailAddress\": \"<email>\",\n  \"password\": \"<string>\",\n  \"name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailAddress\": \"<email>\",\n  \"password\": \"<string>\",\n  \"name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"register"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get the logged-in user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has correct user properties\", function () {",
									"    const responseJson = pm.response.json().data;",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('emailAddress');",
									"    pm.expect(responseJson).to.have.property('name');",
									"});",
									"",
									"",
									"pm.test(\"404 response is handled correctly\", function () {",
									"    if (pm.response.code === 404) {",
									"        pm.expect(pm.response).to.have.status(404);",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('message');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"name": "The user details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<string>\",\n  \"emailAddress\": \"<email>\",\n  \"name\": \"<string>\",\n  \"createdAt\": \"<dateTime>\",\n  \"updatedAt\": \"<dateTime>\"\n}"
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update the logged-in user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has correct user properties\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('emailAddress');",
									"    pm.expect(responseJson).to.have.property('name');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"string\",\n  \"name\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"name": "User updated successfully",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"<string>\",\n  \"name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<string>\",\n  \"emailAddress\": \"<email>\",\n  \"name\": \"<string>\",\n  \"createdAt\": \"<dateTime>\",\n  \"updatedAt\": \"<dateTime>\"\n}"
						}
					]
				},
				{
					"name": "Delete the logged-in user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"name": "User deleted successfully",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "signatures",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Retrieve a specific signature of the logged-in user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"404 response is handled correctly\", function () {",
											"    if (pm.response.code === 404) {",
											"        pm.expect(pm.response).to.have.status(404);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"    }",
											"});",
											"",
											"pm.test(\"invalid UUID format handled correctly\", function () {",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response).to.have.status(400);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"        pm.expect(responseJson.message === \"Invalid UUID format\");",
											"    }",
											"});",
											"",
											"pm.test(\"Signature has correct format\", function () {",
											"    const responseJson = pm.response.json().data;",
											"    pm.expect(responseJson).to.have.property('id');",
											"    pm.expect(responseJson).to.have.property('body');",
											"    pm.expect(responseJson).to.have.property('userId');",
											"    pm.expect(responseJson).to.have.property('isActive').that.is.a('boolean');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/signatures/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signatures",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "aac381bd-867f-4d04-9221-3162f9d3366e"
										}
									]
								},
								"description": "Fetches the details of a signature by its ID."
							},
							"response": [
								{
									"name": "Successfully retrieved the signature details",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/signatures/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signatures",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"body\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"isActive\": \"<boolean>\"\n}"
								},
								{
									"name": "Signature not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/signatures/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signatures",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update an existing signature of the logged-in user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"404 response is handled correctly\", function () {",
											"    if (pm.response.code === 404) {",
											"        pm.expect(pm.response).to.have.status(404);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"    }",
											"});",
											"",
											"pm.test(\"invalid UUID format handled correctly\", function () {",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response).to.have.status(400);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"        pm.expect(responseJson.message === \"Invalid UUID format\");",
											"    }",
											"});",
											"",
											"pm.test(\"Signature has correct format\", function () {",
											"    const responseJson = pm.response.json().data;",
											"    pm.expect(responseJson).to.have.property('id');",
											"    pm.expect(responseJson).to.have.property('body');",
											"    pm.expect(responseJson).to.have.property('userId');",
											"    pm.expect(responseJson).to.have.property('isActive').that.is.a('boolean');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"body\": \"<string>\",\n  \"isActive\": true\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/signatures/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signatures",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "aac381bd-867f-4d04-9221-3162f9d3366e",
											"description": "(Required) Unique ID of the signature"
										}
									]
								},
								"description": "Updates the content of a signature by its ID."
							},
							"response": [
								{
									"name": "Successfully updated the signature",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"body\": \"<string>\",\n  \"isActive\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signatures/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signatures",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"body\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"isActive\": \"<boolean>\"\n}"
								},
								{
									"name": "Signature not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"body\": \"<string>\",\n  \"isActive\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signatures/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signatures",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a signature of the logged-in user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"404 response is handled correctly\", function () {",
											"    if (pm.response.code === 404) {",
											"        pm.expect(pm.response).to.have.status(404);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"    }",
											"});",
											"",
											"pm.test(\"invalid UUID format handled correctly\", function () {",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response).to.have.status(400);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"        pm.expect(responseJson.message === \"Invalid UUID format\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/signatures/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signatures",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) Unique ID of the signature"
										}
									]
								},
								"description": "Deletes a signature by its ID."
							},
							"response": [
								{
									"name": "Successfully deleted the signature",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/signatures/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signatures",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Signature not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/signatures/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signatures",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "active",
					"item": [
						{
							"name": "Get the active signature of the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"404 response is handled correctly\", function () {",
											"    if (pm.response.code === 404) {",
											"        pm.expect(pm.response).to.have.status(404);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"    }",
											"});",
											"",
											"pm.test(\"Signature has correct format\", function () {",
											"    const responseJson = pm.response.json().data;",
											"    pm.expect(responseJson).to.have.property('id');",
											"    pm.expect(responseJson).to.have.property('body');",
											"    pm.expect(responseJson).to.have.property('userId');",
											"    pm.expect(responseJson).to.have.property('isActive').that.is.a('boolean');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/signatures/active",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signatures",
										"active"
									]
								}
							},
							"response": [
								{
									"name": "The active signature of the user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/signatures/active",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signatures",
												"active"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"body\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"isActive\": \"<boolean>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Retrieve all user signatures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"pm.test(\"Signature has correct format\", function () {",
									"    const responseJson = pm.response.json().data;",
									"",
									"    pm.expect(responseJson).to.be.an('array'); ",
									"",
									"    if (responseJson.length > 0) {",
									"        const signature = responseJson[0];",
									"        pm.expect(signature).to.have.property('id');",
									"        pm.expect(signature).to.have.property('body');",
									"        pm.expect(signature).to.have.property('userId');",
									"        pm.expect(signature).to.have.property('isActive').that.is.a('boolean');",
									"    } else {",
									"        pm.expect(responseJson.length).to.equal(0);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/signatures",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"signatures"
							]
						},
						"description": "Fetches all signatures associated with the logged-in user."
					},
					"response": [
						{
							"name": "Successfully retrieved the list of signatures",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/signatures",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signatures"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<string>\",\n    \"body\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"isActive\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"body\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"isActive\": \"<boolean>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create a new signature for the logged-in user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Signature has correct format\", function () {",
									"    const responseJson = pm.response.json().data;",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('body');",
									"    pm.expect(responseJson).to.have.property('userId');",
									"    pm.expect(responseJson).to.have.property('isActive').that.is.a('boolean');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"body\": \"<string>\",\n  \"isActive\": true\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/signatures",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"signatures"
							]
						},
						"description": "Allows a user to create a new signature."
					},
					"response": [
						{
							"name": "Successfully created the signature",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"body\": \"<string>\",\n  \"isActive\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/signatures",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signatures"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<string>\",\n  \"body\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"isActive\": \"<boolean>\"\n}"
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearerToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "messages",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "status",
							"item": [
								{
									"name": "Update a message status",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"READ\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/messages/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id",
													"value": "575aa30c-d047-46ae-90ff-84b9be70be15",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Message status updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"status\": \"READ\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/messages/:id/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"sender\": \"<string>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"folderId\": \"<string>\",\n  \"status\": \"FOLLOWED\",\n  \"createdAt\": \"<dateTime>\"\n}"
										},
										{
											"name": "Invalid status",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"status\": \"READ\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/messages/:id/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Message not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"status\": \"READ\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/messages/:id/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"status"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "move",
							"item": [
								{
									"name": "Move a message to a folder",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"folderId\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/messages/:id/move",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id",
												"move"
											],
											"variable": [
												{
													"key": "id",
													"value": "575aa30c-d047-46ae-90ff-84b9be70be15",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Message moved to the folder",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"folderId\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/messages/:id/move",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"move"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"sender\": \"<string>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"folderId\": \"<string>\",\n  \"status\": \"FOLLOWED\",\n  \"createdAt\": \"<dateTime>\"\n}"
										},
										{
											"name": "Not found error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"folderId\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/messages/:id/move",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"move"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"Message not found\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "favorite",
							"item": [
								{
									"name": "Toggle a message favorite",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/messages/:id/favorite",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id",
												"favorite"
											],
											"variable": [
												{
													"key": "id",
													"value": "575aa30c-d047-46ae-90ff-84b9be70be15",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Message favorite toggled",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/messages/:id/favorite",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"favorite"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"sender\": \"<string>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"folderId\": \"<string>\",\n  \"status\": \"FOLLOWED\",\n  \"createdAt\": \"<dateTime>\"\n}"
										},
										{
											"name": "Message not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/messages/:id/favorite",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"favorite"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "trash",
							"item": [
								{
									"name": "Toggle a message trash",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/messages/:id/trash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id",
												"trash"
											],
											"variable": [
												{
													"key": "id",
													"value": "575aa30c-d047-46ae-90ff-84b9be70be15",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Message trash toggled",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/messages/:id/trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"trash"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"sender\": \"<string>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"folderId\": \"<string>\",\n  \"status\": \"FOLLOWED\",\n  \"createdAt\": \"<dateTime>\"\n}"
										},
										{
											"name": "Message not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/messages/:id/trash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"trash"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "send",
							"item": [
								{
									"name": "Send a message",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/messages/:id/send",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id",
												"send"
											],
											"variable": [
												{
													"key": "id",
													"value": "575aa30c-d047-46ae-90ff-84b9be70be15",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Message sent",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/messages/:id/send",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"send"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"sender\": \"<string>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"folderId\": \"<string>\",\n  \"status\": \"FOLLOWED\",\n  \"createdAt\": \"<dateTime>\"\n}"
										},
										{
											"name": "Conflict error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/messages/:id/send",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"send"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"Message is not a draft\"\n}"
										},
										{
											"name": "Message not found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/messages/:id/send",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"messages",
														":id",
														"send"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get a message by ID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "The message details",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/messages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"sender\": \"<string>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"folderId\": \"<string>\",\n  \"status\": \"FOLLOWED\",\n  \"createdAt\": \"<dateTime>\"\n}"
								},
								{
									"name": "Message not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/messages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a message if the message is a draft",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"sender\": -85255241.39155771\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/messages/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Message updated successfully",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"sender\": -85255241.39155771\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/messages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"sender\": \"<string>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"folderId\": \"<string>\",\n  \"status\": \"FOLLOWED\",\n  \"createdAt\": \"<dateTime>\"\n}"
								},
								{
									"name": "Message not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"sender\": -85255241.39155771\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/messages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a message",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/messages/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "c8ee47a4-6043-47e2-9813-328bd9533a8e",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Message deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/messages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Message not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/messages/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"messages",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get all messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Message has required properties\", function () {",
									"    const responseJson = pm.response.json().data;",
									"",
									"    pm.expect(responseJson).to.be.an('array'); ",
									"",
									"    if (responseJson.length > 0) {",
									"        pm.expect(responseJson).to.have.property('id');",
									"        pm.expect(responseJson).to.have.property('sender');",
									"        pm.expect(responseJson).to.have.property('recipients').that.is.an('array');",
									"        pm.expect(responseJson).to.have.property('subject');",
									"        pm.expect(responseJson).to.have.property('body');",
									"        pm.expect(responseJson).to.have.property('status');",
									"        pm.expect(responseJson.status).to.be.oneOf(['UNREAD', 'READ', 'FOLLOWED']);",
									"    } else {",
									"        pm.expect(responseJson.length).to.equal(0);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": [
						{
							"name": "A list of messages",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<string>\",\n    \"sender\": \"<string>\",\n    \"recipients\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"subject\": \"<string>\",\n    \"body\": \"<string>\",\n    \"folderId\": \"<string>\",\n    \"status\": \"UNREAD\",\n    \"createdAt\": \"<dateTime>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"sender\": \"<string>\",\n    \"recipients\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"subject\": \"<string>\",\n    \"body\": \"<string>\",\n    \"folderId\": \"<string>\",\n    \"status\": \"UNREAD\",\n    \"createdAt\": \"<dateTime>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create a new message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Message has required properties\", function () {",
									"    const responseJson = pm.response.json().data;",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('sender');",
									"    pm.expect(responseJson).to.have.property('recipients').that.is.an('array');",
									"    pm.expect(responseJson).to.have.property('subject');",
									"    pm.expect(responseJson).to.have.property('body');",
									"    pm.expect(responseJson).to.have.property('status');",
									"    pm.expect(responseJson.status).to.be.oneOf(['UNREAD', 'READ', 'FOLLOWED']);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"sender\": -85255241.39155771\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": [
						{
							"name": "Message created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"sender\": -85255241.39155771\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<string>\",\n  \"sender\": \"<string>\",\n  \"recipients\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"subject\": \"<string>\",\n  \"body\": \"<string>\",\n  \"folderId\": \"<string>\",\n  \"status\": \"FOLLOWED\",\n  \"createdAt\": \"<dateTime>\"\n}"
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearerToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "folders",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Retrieve a specific folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"404 response is handled correctly\", function () {",
											"    if (pm.response.code === 404) {",
											"        pm.expect(pm.response).to.have.status(404);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"    }",
											"});",
											"",
											"pm.test(\"invalid UUID format handled correctly\", function () {",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response).to.have.status(400);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"        pm.expect(responseJson.message === \"Invalid UUID format\");",
											"    }",
											"});",
											"",
											"pm.test(\"Folder has correct format\", function () {",
											"    const responseJson = pm.response.json().data;",
											"    pm.expect(responseJson).to.have.property('id');",
											"    pm.expect(responseJson).to.have.property('name');",
											"    pm.expect(responseJson).to.have.property('userId');",
											"    pm.expect(responseJson).to.have.property('messages');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "408c9882-fb67-4402-b48b-13c4334b1154",
											"description": "(Required) Unique ID of the folder"
										}
									]
								},
								"description": "Fetches the details of a folder by its ID."
							},
							"response": [
								{
									"name": "Successfully retrieved the folder details",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"messages\": [\n    {\n      \"id\": \"<string>\",\n      \"sender\": \"<string>\",\n      \"recipients\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"subject\": \"<string>\",\n      \"body\": \"<string>\",\n      \"folderId\": \"<string>\",\n      \"status\": \"FOLLOWED\",\n      \"createdAt\": \"<dateTime>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"sender\": \"<string>\",\n      \"recipients\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"subject\": \"<string>\",\n      \"body\": \"<string>\",\n      \"folderId\": \"<string>\",\n      \"status\": \"UNREAD\",\n      \"createdAt\": \"<dateTime>\"\n    }\n  ]\n}"
								},
								{
									"name": "Folder not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update an existing folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"404 response is handled correctly\", function () {",
											"    if (pm.response.code === 404) {",
											"        pm.expect(pm.response).to.have.status(404);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"    }",
											"});",
											"",
											"pm.test(\"invalid UUID format handled correctly\", function () {",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response).to.have.status(400);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"        pm.expect(responseJson.message === \"Invalid UUID format\");",
											"    }",
											"});",
											"",
											"pm.test(\"Folder has correct format\", function () {",
											"    const responseJson = pm.response.json().data;",
											"    pm.expect(responseJson).to.have.property('id');",
											"    pm.expect(responseJson).to.have.property('name');",
											"    pm.expect(responseJson).to.have.property('userId');",
											"    pm.expect(responseJson).to.have.property('messages');",
											"",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/folders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "408c9882-fb67-4402-b48b-13c4334b1154",
											"description": "(Required) Unique ID of the folder"
										}
									]
								},
								"description": "Updates the details of a folder by its ID."
							},
							"response": [
								{
									"name": "Successfully updated the folder",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/folders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"messages\": [\n    {\n      \"id\": \"<string>\",\n      \"sender\": \"<string>\",\n      \"recipients\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"subject\": \"<string>\",\n      \"body\": \"<string>\",\n      \"folderId\": \"<string>\",\n      \"status\": \"FOLLOWED\",\n      \"createdAt\": \"<dateTime>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"sender\": \"<string>\",\n      \"recipients\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"subject\": \"<string>\",\n      \"body\": \"<string>\",\n      \"folderId\": \"<string>\",\n      \"status\": \"UNREAD\",\n      \"createdAt\": \"<dateTime>\"\n    }\n  ]\n}"
								},
								{
									"name": "Folder not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/folders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"404 response is handled correctly\", function () {",
											"    if (pm.response.code === 404) {",
											"        pm.expect(pm.response).to.have.status(404);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"    }",
											"});",
											"",
											"pm.test(\"invalid UUID format handled correctly\", function () {",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response).to.have.status(400);",
											"        const responseJson = pm.response.json();",
											"        pm.expect(responseJson).to.have.property('message');",
											"        pm.expect(responseJson.message === \"Invalid UUID format\");",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/folders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "408c9882-fb67-4402-b48b-13c4334b1154",
											"description": "(Required) Unique ID of the folder"
										}
									]
								},
								"description": "Deletes a folder by its ID."
							},
							"response": [
								{
									"name": "Successfully deleted the folder",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Folder not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Retrieve all user folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Folders has correct format\", function () {",
									"    const responseJson = pm.response.json().data;",
									"",
									"    pm.expect(responseJson).to.be.an('array'); ",
									"",
									"    if (responseJson.length > 0) {",
									"        const folder = responseJson[0];",
									"        pm.expect(folder).to.have.property('id');",
									"        pm.expect(folder).to.have.property('name');",
									"        pm.expect(folder).to.have.property('userId');",
									"    } else {",
									"        pm.expect(responseJson.length).to.equal(0);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/folders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders"
							]
						},
						"description": "Fetches all folders associated with the logged-in user."
					},
					"response": [
						{
							"name": "Successfully retrieved the folders",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"userId\": \"<string>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"userId\": \"<string>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create a new folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Folder already exists\", function () {",
									"    if (pm.response.code === 409){",
									"        pm.response.to.have.status(409);",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property(\"errors\");",
									"        pm.expect(jsonData.message).to.eql(\"A folder with the same name already exists for this user.\");",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Folder has correct format\", function () {",
									"    const responseJson = pm.response.json().data;",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('name');",
									"    pm.expect(responseJson).to.have.property('userId');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/folders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders"
							]
						},
						"description": "Allows a user to create a new folder."
					},
					"response": [
						{
							"name": "Successfully created the folder",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/folders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"userId\": \"<string>\"\n}"
						},
						{
							"name": "Folder already exists",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/folders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearerToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		},
		{
			"key": "bearerToken",
			"value": ""
		}
	]
}